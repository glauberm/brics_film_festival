<?php

defined( 'ABSPATH' ) || die();

abstract class Abstract_Form {
	private $route_namespace = 'brics/v1';
	protected $route;

	abstract protected function get_data( array $data ) : array;
	abstract protected function sanitize_fields( array $data ) : array;
	abstract protected function form_action() : void;

	/**
	 * Initialize form handler.
	 *
	 * @return void
	 */
	public function init() {
		add_action( 'rest_api_init', array( $this, 'api_route' ) );
	}

	/**
	 * Add form handler API route.
	 *
	 * @return void
	 */
	public function api_route() {
		register_rest_route(
			$this->route_namespace, // namespace
			$this->route, // route
			array( // args
				'methods'  => 'POST',
				'callback' => array( $this, 'handle_form' ),
			)
		);
	}

	/**
	 * Handles form submission process.
	 *
	 * @return void
	 */
	private function handle_form() {
		if ( $this->validate_recaptcha() ) {
			$data = array();
			$data = $this->get_data( $data );

			if ( $this->validate_fields( $data ) ) {
				if ( $this->form_action( $data ) ) {
					$this->success_redirect();
				}
			}

			return new WP_Error( 'validate_fields', 'Error on form fields validation.' );
		}

		return new WP_Error( 'validate_recaptcha', 'Error on reCAPTCHA validation.' );
	}

	/**
	 * Handles reCAPTCHA validation.
	 *
	 * @return void
	 */
	private function validate_recaptcha() {
		if ( ENV !== 'development' ) {
			if ( empty( $_POST['g-recaptcha-response'] ) ) {
				$this->error_redirect( 'empty_recaptcha' );
			} else {
				$recaptcha_response = wp_remote_post(
					'https://www.google.com/recaptcha/api/siteverify',
					array(
						'body' => array(
							'secret'   => RECAPTCHA_SECRET_KEY,
							'response' => esc_attr( $_POST['g-recaptcha-response'] ),
						),
					)
				);

				$recaptcha = json_decode( $recaptcha_response['body'], true );

				if ( ! $recaptcha['success'] ) {
					$this->error_redirect( 'recaptcha_error' );
				}

				return true;
			}
		}

		return true;
	}

	/**
	 * Handles error redirects.
	 *
	 * @param string $error_code
	 * @return void
	 */
	private function error_redirect( string $error_code ) {
		wp_redirect(
			BASE_SITE_URL . $this->path . '?error='
			. rawurlencode( $error_code )
		);
		exit();
	}

	/**
	 * Handles success redirects.
	 *
	 * @return void
	 */
	private function success_redirect() {
		wp_redirect(
			BASE_SITE_URL . $this->path . '?success=true'
		);
		exit();
	}
}
